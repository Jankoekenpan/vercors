class TMS1 {

    set<tuple<Future/*Transaction*/, Future/*Transaction*/>> extOrder = set<tuple<Future/*Transaction*/, Future/*Transaction*/>> { } ;

}

class Future /*Transaction*/ {

    Future(set<tuple<Future, Future>> extOrder) {
        this.
    }

    /*
    enum Status {
    	notStarted, beginPending, ready, opPending, commitPending, cancelPending, committed, aborted;
    }
    */

    static final int STATUS_NOT_STARTED = 0;
    static final int STATUS_BEGIN_PENDING = 1;
    static final int STATUS_READY = 2;
    static final int STATUS_OP_PENDING = 3;
    static final int STATUS_COMMIT_PENDING = 4;
    static final int STATUS_CANCEL_PENDING = 5;
    static final int STATUS_COMMITTED = 6;
    static final int STATUS_ABORTED = 7;

    static final int OP_I = 0;
    static final int OP_R = 1;

    //some helper functions for lists (unfortunately there is no generic support yet, so now I'm hardcoding for int)
    static pure int/*T*/ head(seq<int/*T*/> list) = list[0];
    static pure int/*T*/ tail(seq<int/*T*/> list) = list[1..];
    static pure seq<seq<int/*T*/>> tails(seq<int/*T*/> list) =
        (list == seq<int/*T*/>{})
            ? (seq<int/*T*/>{})
            : (list :: tails(tail(list));
    static pure seq<int/*T*/> append(seq<int/*T*/> list, int/*T*/ item) = list ++ item;
    static pure seq<int/*T*/> concat(seq<int/*T*/> list1, seq<int/*T*/> list2 = list1 + list2;
    //Contrary to Haskell and Scala, PVL uses a single plus for concatenation and a double plus for appending!!

    //some helper functions for validation of this transaction
    pure boolean validResp(int/*I*/ i, int/*R*/ r) = true;  //TODO implement this   (can use instance fields! :))
    pure boolean validCommit() = true;                      //TODO implement        (can use instance fields! :))

    private static final int NUM_TRANSACTIONS = 10; //TODO convert fields to sequences of size NUM_TRANSACTIONS.

    //the 'current' status of this transaction
    int status = STATUS_NOT_STARTED;

    //the operations of this transaction
    seq<tuple<int/*I*/, int/*R*/> ops = seq<tuple<int/*I*/, int/*R*/>> {};

    //whether the commit transition has been taken
    boolean invokedCommit = false;



    //processes
    process total(seq<int/*I*/> is, seq<int/*R*/> rs) = begin() * (abort() + (beginOk() + doOps(is, rs)));
    process doOps(seq<int/*I*/> is, seq<int/*R*/> rs) = actions(is, rs) + (cancel() * abort()) + (commit() * (abort() + commitOk());
    process actions(seq<int/*I*/> is, seq<int/*R*/> rs) = inv(head(is)) * responseOrAbort(tail(is));    //TODO add seceond argument!
    process responseOrAbort(seq<int/*I*/> is, seq<int/*R*/> rs) = abort() + (response(head(rs) * actions(is, tails(rs)));   //TODO types don't match! seq<int> and seq<seq<int>>

    //begin
    modifies status;
    requires status == notStarted;
    ensures status == beginPending;
    //TODO modifies tms1.extOrder;
    //TODO ensures tms1.extOrder == \old(tms1.extOrder) \intersect (tms1.DT(), {this});
    process begin();

    //beginOk
    modifies status;
    requires status == beginPending;
    ensures status == ready;
    process beginOk();

    //inv
    modifies status;
    modifies pendingOp
    requires status == ready;
    ensures status == opPending;
    ensures pendingOp == i;
    process inv(int/*OP_I*/ i);

    //resp
    modifies status;
    modifies ops;
    requires status == opPending;
    requires validResp(this, pendingOp, r);
    ensures status == ready;
    ensures ops == append(\old(ops), tuple<int/*I*/, int/*R*/> {pendingOp, r})
    process resp(int/*R*/ r);

    //commit
    modifies status;
    modifies invokedCommit;
    requires status == ready;
    ensures status == commitPending;
    ensures invokedCommit == true;
    process commit();

    //commitOk
    modifies status;
    requires status == commitPending;
    //TODO requires validCommit(t);
    ensures status == committed;
    proccss commitOk();

    //cancel
    modifies status;
    requires status == ready;
    ensures status == cancelPending;
    process cancel();

    //abort
    modifies status;
    requires status in set<int/*Status*/> {STATUS_BEGIN_PENDING, STATUS_OP_PENDING, STATUS_COMMIT_PENDING, STATUS_CANCEL_PENDING};
    ensures status == aborted;
    process abort();




    //derived state

    /* taken from my initial tms1.vpa concept file:

    def DT(): set<Transaction> = {t | t `in` allTransactions, t.status in {committed,aborted}};
    def CT(): set<Transaction> = {t | t `in` allTransactions, t.status == committed};
    def CPT(): set<Transaction> = {t | t `in` allTransactions, t.status = commitPending};
    def VT(): set<Transaction> = {t | `in` allTransactions, t.invokedCommit};

    //all operations of a sequences of transactions concatenated into one sequence
    def ops(sigma: seq<Transaction>): seq<seq<(I, R)>> = [t.ops | t in sigma];

    //tests for all external transactions whether it being in the argument set means that it is committed
    def extConsPrefix(S: set<Transaction>): Boolean = \forall (t; t `in` allTransactions; \forall(t2; t2 `in` S; (t, t2) `in` extOrder ==> (t `in` S == (t.status == committed))));

    //check whether t is pending and would be legal in a certain sequence of transactions
    def validCommit(t: Transaction): Boolean = \exists(S: set<Transaction>; S \subset CPT(); \exists(sigma: seq<Transaction>; sigma `in` ser(CT() `union` S, extOrder); t `in` S && legal(ops(sigma))));

    //check whether t is pending and  would be illegal in a certain sequence of transactions
    def validFail(t: Transaction): Boolean = \exists(S: set<Transaction>; S \subset CPT(); \exists(sigma: seq<Transaction>; sigma `in ser(CT() `union` S, extOrder); t `notin` S && legal(ops(sigma))));

    //check whether all 'about to be committed'-transactions (including t) would make a legal sequence with (i, r) appended
    def validResp(t: Transaction, i: I, r: R): Boolean = \exists(S: set<Transaction>; S `subset` VT(); \exists(sigma: seq<Transaction>; sigma `in` ser(S, extOrder); extConstPrefix(S `union` {t}) && legal(ops(sigma `append` t) `append` (i, r))));

    //serializations
    def ser(set1: set<Transaction>, set2: set<(Transaction, Transaction)>): set<seq<Transaction>> = //TODO all possible combinations of sequences of transactions

    //check whether a serialization is leagal
    def legal(sigma: seq<seq<(I, R)>>): Boolean = //TODO check that reads only read values that were previously written, or abitrary values if nothing was written yet


    //processes

    //TODO we want one sequence of operations per transaction.
    proccess doTransactions(operationss: set<(seq<I>, seq<R>)>) = \par(operations: (seq<I>, seq<R>); true;\par(t: Transaction; t `in` allTransactions; t.total(operations._1, operations._2)));

    */
}